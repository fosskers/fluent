#+title: Fluent

This is a Common Lisp implementation of [[https://projectfluent.org/][Fluent]], a modern localisation system.

See also Fluent's [[https://projectfluent.org/fluent/guide/index.html][Syntax Guide]].

With Fluent, localisations are defined in per-language =.ftl= files as key-value
pairs. Many localisations are just simple lookups:

#+begin_example
check-start = Validating your system.
#+end_example

But Fluent's strength is in the ability to inject values into the line, as well
as perform "selections" based on grammatical rules and plural categories:

#+begin_example
check-pconf-pacnew-old = { $path } is older than its .pacnew by { $days ->
    [one] 1 day.
   *[many] {$days} days.
}
#+end_example

#+begin_src lisp :exports both
(in-package :fluent)
(let* ((loc (parse (uiop:read-file-string "tests/data/aura.ftl")))
       (ctx (localisation->fluent loc :en)))
  (resolve ctx "check-pconf-pacnew-old" :path "pacman.conf" :days 1))
#+end_src

#+RESULTS:
: pacman.conf is older than its .pacnew by 1 day.

Per-locale plural rules are provided by the [[https://github.com/fosskers/plurals][plurals]] library.

* Table of Contents :TOC_5_gh:noexport:
- [[#compatibility][Compatibility]]
- [[#usage][Usage]]
  - [[#reading-localisations-from-disk][Reading localisations from disk]]
  - [[#localisation-lookups][Localisation lookups]]
  - [[#embedding-localisations-into-your-application][Embedding localisations into your application]]
- [[#limitations][Limitations]]

* Compatibility

| Compiler  | Status |
|-----------+--------|
| SBCL      | ✅     |
| ECL       | ✅     |
| Clasp     | ✅     |
| ABCL      | ✅     |
| CCL       | ✅     |
| Clisp     | ❌     |
| Allegro   | ✅     |
| LispWorks | ❓     |

* Usage

The examples below use =(in-package :fluent)= for brevity, but it's assumed you'll
use a nickname in your own code, perhaps =f=.

** Reading localisations from disk

Your localisation files will typically have the extension =.ftl=.

** Localisation lookups

Once you have a fully formed =fluent= context, you can perform localisation
lookups. Input args into the localisation line are passed as keyword arguments.

#+begin_src lisp :exports both
(in-package :fluent)
(let* ((loc (parse (uiop:read-file-string "tests/data/aura.ftl")))
       (ctx (localisation->fluent loc :en)))
  (resolve ctx "check-pconf-pacnew-old" :path "pacman.conf" :days 1))
#+end_src

#+RESULTS:
: pacman.conf is older than its .pacnew by 1 day.

A condition will be raised if:

- The requested locale doesn't exist in the =fluent= context.
- The requested localisation line doesn't exist in the locale.
- Expected line inputs were missing (e.g. the =path= and =days= args above).

** Embedding localisations into your application

* Limitations

- Gap lines in multiline text are not supported.
- Preservation of clever indenting in multiline text is not supported.
- For the =NUMBER= function, only the =minimumFractionDigits=,
  =maximumFractionDigits=, and =type= arguments are supported.
- The =DATETIME= function has not been implementation.
- Attributes are not available, so the following is not possible:

#+begin_example
-brand-name = Aurora
    .gender = feminine

update-successful =
    { -brand-name.gender ->
        [masculine] { -brand-name } został zaktualizowany.
        [feminine] { -brand-name } została zaktualizowana.
       *[other] Program { -brand-name } został zaktualizowany.
    }
#+end_example
